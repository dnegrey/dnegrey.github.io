---
title: "Git Fundamentals"
date: "2017-03-16"
description: "This post blahblahblah."
categories: [git, command line, version control]
image: "image.jpg"
---

Of all the tools I use as a data scientist, the one that I cherish the most is
**[Git](https://git-scm.com/)**. As a free and open source *distributed* version
control system, Git plays an integral role in my work by seamlessly fostering
many of the most important considerations of data science workflows including
**collaboration**, **experimentation**, **reproducibility** and of course,
**source code management**.

At their core, version control systems (VCS) all serve one broad and common
purpose: *tracking changes to files*. What distinguishes one system from
another, however, is *how* that purpose is implemented and what additional
features are present. To get a better understanding of the history and evolution
of version control systems, I recommend reading the introduction at [Ry's Git
Tutorial](http://rypress.com/tutorials/git/index). You might also want to
bookmark his tutorial and work your way through all of the sections as he does a
terrific job demonstrating Git's feature set in much greater detail than what
I'm covering in this post.

Before we move on, let's clarify something that often comes up when people first
start learning about Git. Many of you may have heard of companies like
[GitHub](https://github.com/), [GitLab](https://about.gitlab.com/) or
[Bitbucket](https://bitbucket.org/). These are each examples of *web-based
repository hosting services*. Git itself is just a lightweight command line
tool. Services like GitHub provide software development platforms that center
around the use of Git but add a rich suite of additional features. The focus of
this post is on learning the fundamentals of the Git command line tool.

## Prerequisites

A basic understanding of Linux (Unix-like) commands is assumed. Specifically,
this post makes extensive use of the following:

* `mkdir`: create new directories
* `cd`: change the current working directory
* `echo`: display a line of text
* `cat`: concatenate files and print on the standard output
* `ls`: list directory contents
* `rm`: remove files or directories

For brevity, I am using `echo` with redirection (`>`) to write files. In
reality, you'd be using a visual editor such as `vi` to write and edit files.

## Create a Local Git Repository

Before we can do anything with Git, we must initialize a directory as a Git
repository. Let's do so in a brand new directory that we'll create called
`fundamentals` underneath our home directory (`~`):

```{r}
#| echo: false
knitr::opts_chunk$set(comment=NA)
knitr::opts_knit$set(root.dir='/home/dan')
```

```{bash}
cd ~
mkdir fundamentals
cd fundamentals
git init
```

```{r}
#| echo: false
knitr::opts_knit$set(root.dir='/home/dan/fundamentals')
```

## Add a README File

The first thing you'll want to do with any new Git repository is add a
**README.md** file to the project root. As a plain text file, it will be the
easiest place to save and read notes about your project. The ".md" extension
indicates that it is a [markdown](https://daringfireball.net/projects/markdown/)
file. Markdown is a text-to-HTML conversion tool that allows you to create
easy-to-read and easy-to-write plain text files which get converted to HTML.
Hosting services like GitHub and GitLab will automatically render your README.md
file to HTML at the main repository site (for example:
[https://github.com/rstudio/blogdown](https://github.com/rstudio/blogdown)).
Here is a brief primer on some of the more commonly used markdown syntax:

----------

<div>
<div style="float: left; width: 48%; margin-left: 0; margin-right: 2%;">

### **Headers**

```{bash}
#| eval: false
#| highlight: false
# is an h1 header
## is an h2 header
### is an h3 header (and so on)
```

### **Regular Writing**

```{bash}
#| eval: false
#| highlight: false
Regular writing becomes a <p> tag
```

### **Inline Code**

```{bash}
#| eval: false
#| highlight: false
Enclose inline code in `single ticks`
```

### **Unordered Lists**

```{bash}
#| eval: false
#| highlight: false
* item one in unordered list
* item two in unordered list
* item three in unordered list
```

</div>
<div style="float: right; width: 48%; margin-left: 2%; margin-right: 0;">

### **Italics and Bold**

```{bash}
#| eval: false
#| highlight: false
*italics*
**bold**
***bold-and-italics***
```

### **Hyperlinks**

```{bash}
#| eval: false
#| highlight: false
[hyperlink-alt-text](hyperlink-href)
```

### **Code Chunks**

```{bash}
#| eval: false
#| highlight: false
    Indent four spaces for a code block
```

### **Ordered Lists**

```{bash}
#| eval: false
#| highlight: false
1 item one in ordered list
2 item two in ordered list
3 item three in ordered list
```

</div>
<br style="clear:both;"/>
</div>

----------

Now let's actually create our README.md file. A popular convention (and one that
I use) is to have the first line of your README.md file be an `<h1>` header with
the name of your repository:

```{bash}
echo \# fundamentals > README.md
cat README.md
```


